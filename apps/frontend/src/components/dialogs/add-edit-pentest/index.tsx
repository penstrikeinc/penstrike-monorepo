import Box from '@mui/material/Box';
import Dialog from '@mui/material/Dialog';
import DialogContent from '@mui/material/DialogContent';
import Step from '@mui/material/Step';
import StepButton from '@mui/material/StepButton';
import Stepper from '@mui/material/Stepper';
import Typography from '@mui/material/Typography';
import { FC, useState } from 'react';
import { DialogActions, Grid, StepLabel } from '@mui/material';
import { useTheme } from '@mui/material/styles';

import { useGetDevice } from 'src/components/hooks';
import { ellipsis } from 'src/utils';
import { useAssetsFormSchema, usePentestFormSchema } from 'src/components/forms';
import Scrollbar from 'src/components/scrollbar';
import { ICompletedStateProps, IStep } from './step-components/type';
import { Summery } from './step-components/summery';
import { DialogHeader } from '../../dialog-header';
import { ScheduleInfoForm } from './step-components/info-schedule';
import { AssetUrl } from './step-components/asset-url';
import { StickyFooter } from './step-components/sticky-footer';
import { useAddEditPentestFunctionality } from './use-add-edit-pentest-functionality';

export interface IAddEditSupplierDialogProps {
  open: boolean;
  context: any | null;
  onClose: () => void;
}

export const AddEditPentestDialog: FC<IAddEditSupplierDialogProps> = (props) => {
  const { open, context, onClose } = props;
  const [activeStep, setActiveStep] = useState(0);
  const { isTablet, isMobile } = useGetDevice();
  const [completed, setCompleted] = useState<ICompletedStateProps>({});
  const [supplierFormIsDirty, setSupplierFormIsDirty] = useState(false);
  const { methods } = usePentestFormSchema();
  const { methods: assetMethods } = useAssetsFormSchema();

  const theme = useTheme();
  const isEditMode = !!context;
  const disabledFields = isEditMode ? ['country'] : undefined;

  const {
    onSubmit,
    onCloseHandler,
    onCloseDialogHandler,
    handleBack,
    handleNext,
    handleStep,
    isDisabled,
    isMutationLoading,
  } = useAddEditPentestFunctionality({
    context,
    onClose,
    isEditMode,
    activeStep,
    setActiveStep,
    setCompleted,
    completed,
    methods,
    setSupplierFormIsDirty,
    assetMethods,
  });

  const steps: IStep[] = [
    {
      order: 0,
      state: 'info-schedule',
      label: 'Info.& Schedule',
      description: 'Specify your pentest plan',
      component: ScheduleInfoForm,
    },
    {
      order: 1,
      state: 'assets-url',
      label: 'Assets & URLs',
      description: 'Plan methodology & members',
      component: AssetUrl,
    },
    {
      order: 2,
      state: 'submit-review',
      label: 'Submit for Review',
      description: 'Review & submit your plan',
      component: Summery,
    },
  ];

  const ActiveStepContent = steps[activeStep].component;

  return (
    <Dialog
      open={open}
      onClose={onCloseDialogHandler}
      maxWidth="lg"
      fullWidth
      fullScreen={isTablet || isMobile}
    >
      <DialogHeader onClose={onCloseHandler}>
        <Box>
          <Typography variant="h4" sx={{ ...ellipsis, fontWeight: 'bold' }}>
            Create Pentest
          </Typography>
          <Typography variant="body2" color="text.secondary">
            Create your pentest by filling the information below. Secure your business by top notch
            security
          </Typography>
        </Box>
      </DialogHeader>
      <DialogContent sx={{ p: 2 }}>
        <Grid container spacing={2}>
          <Grid item md={3}>
            <Stepper nonLinear activeStep={activeStep} alternativeLabel orientation="vertical">
              {steps.map((step, index) => (
                <Step
                  key={step.label}
                  completed={completed[index]}
                  sx={{
                    width: '100%',
                    mb: 1,
                    p: 2,
                    bgcolor: theme.palette.divider,
                    borderRadius: 1,
                  }}
                >
                  <StepButton color="inherit" onClick={handleStep(index)}>
                    <StepLabel
                      StepIconProps={{
                        sx: {
                          width: 30,
                          height: 30,
                        },
                      }}
                      sx={{
                        width: '100%',
                        display: 'flex',
                        alignItems: 'start',
                      }}
                    >
                      <Typography textAlign="left" variant="h6">
                        {step.label}
                      </Typography>

                      <Typography variant="body2" textAlign="left">
                        {step.description}
                      </Typography>
                    </StepLabel>
                  </StepButton>
                </Step>
              ))}
            </Stepper>
          </Grid>

          <Grid item md={9}>
            <Scrollbar
              sx={{
                p: 3,
                bgcolor: theme.palette.divider,
                borderRadius: 1,
                height: 'calc(100vh - 280px)',
              }}
            >
              <ActiveStepContent
                steps={steps}
                activeStep={activeStep}
                handleBack={handleBack}
                handleNext={handleNext}
                methods={methods}
                assetMethods={assetMethods}
                onSubmitHandler={onSubmit}
                disabledFields={disabledFields}
                isDisabled={isDisabled}
                isEditMode={isEditMode}
                companyId="asdf"
                isMutationLoading={isMutationLoading}
                supplierFormIsDirty={supplierFormIsDirty}
                setSupplierFormIsDirty={setSupplierFormIsDirty}
              />
            </Scrollbar>
          </Grid>
        </Grid>
      </DialogContent>
      <DialogActions sx={{ p: 0 }}>
        <StickyFooter
          steps={steps}
          onSave={onSubmit}
          activeStep={activeStep}
          handleBack={handleBack}
          handleNext={handleNext}
        />
      </DialogActions>
    </Dialog>
  );
};
