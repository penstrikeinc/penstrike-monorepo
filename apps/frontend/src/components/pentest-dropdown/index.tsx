import Autocomplete from '@mui/material/Autocomplete';
import TextField from '@mui/material/TextField';
import { FC, SyntheticEvent, useCallback, useEffect, useMemo, useState } from 'react';
import { IPentest } from 'src/types';
import { mapPentestDataToSelect, OptionType } from 'src/utils';
import { useGetAllPentestQuery } from 'src/services';

interface IDropdownProps {
  pentestId: string;
  onChange: (user: IPentest | null) => void;
  label?: string;
}

export const PentestDropdown: FC<IDropdownProps> = (props) => {
  const { onChange, pentestId, label = 'Pentest Dropdown' } = props;
  const [value, setValue] = useState<OptionType | null>(null);

  const { data: pentestRes, isLoading } = useGetAllPentestQuery();
  const pentests = useMemo(() => pentestRes?.data.items || [], [pentestRes?.data.items]);
  const pentestOptions = pentestRes ? mapPentestDataToSelect(pentests) : [value];

  const onChangeHandler = useCallback(
    (_e: SyntheticEvent, selectedItem: OptionType | null) => {
      if (!selectedItem) {
        onChange(null);
        return;
      }

      const find = pentests.find((user) => user.id === selectedItem.value);
      onChange(find || null);
    },
    [pentests, onChange]
  );

  const pentest = pentestOptions.find((option) => option?.value === pentestId);

  useEffect(() => {
    if (pentest) {
      if (pentest.value !== value?.value) {
        setValue({
          label: pentest.label,
          value: pentest.value,
        });
      }
    } else {
      setValue(null);
    }
  }, [pentest, value?.value]);

  return (
    <Autocomplete
      fullWidth
      autoComplete
      autoHighlight
      noOptionsText="No pentest found"
      loading={isLoading}
      value={value}
      options={[...pentestOptions]}
      renderInput={(params) => <TextField {...params} label={label} />}
      onChange={onChangeHandler}
    />
  );
};
